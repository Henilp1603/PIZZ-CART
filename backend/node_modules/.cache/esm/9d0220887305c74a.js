let Joi,REFRESH_SECRET,RefreshToken,User,CustomErrorHandler,JwtService;_730‍.x([["default",()=>_730‍.o]]);_730‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_730‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);_730‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_730‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_730‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);






const refreshController={
    async refresh(req,res,next){
        const refreshSchema =Joi.object({
            refresh_token:Joi.string().required(),
            
        });

        const {error}=refreshSchema.validate(req.body);

        if (error){
            return next(error);
        }

        let refrestoken;
        try {
            refrestoken =await RefreshToken.findOne({ token: req.body.refresh_token});
            if (!refrestoken){
                return next(CustomErrorHandler.unAuthorized('Invalid refresh token'));
            }
            let userId;
            try {
                const {_id}=await JwtService.verify(refrestoken.token,REFRESH_SECRET);
                userId=_id;


            } catch (err) {
                return next(CustomErrorHandler.unAuthorized('Invalid refresh token'));
                
            }
            const user =await User.findOne({_id:userId});
            if (!user){
                return next(CustomErrorHandler.unAuthorized('No user found'));

            }
            const access_token = JwtService.sign({_id:user._id, role: user.role});
           const refresh_token = JwtService.sign({_id:user._id,role:user.role},'1y', REFRESH_SECRET);
            
            await RefreshToken.create({token:refresh_token})
            res.json({access_token,refresh_token})


        } catch (err) {
            return next(err);
        }

    }

}

_730‍.d(refreshController);