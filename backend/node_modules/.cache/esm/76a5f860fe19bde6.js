let Joi,RefreshToken,User,CustomErrorHandler,bcrypt,JwtService,REFRESH_SECRET;_fe1‍.x([["default",()=>_fe1‍.o]]);_fe1‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_fe1‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_fe1‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_fe1‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_fe1‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_fe1‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);








const registerController={
   async register(req,res,next){

        const registerSchema =Joi.object(
            {
                name:Joi.string().min(3).max(30).required(),
                email:Joi.string().email().required(),
                password:Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,16}$')).required(),
                repeat_password:Joi.ref('password'),
            }
        )
        
        const {error}=registerSchema.validate(req.body);
        if (error){
            return next(error);
        }

        try {
            const exist=await User.exists({email:req.body.email});
            if(exist){
                return next(CustomErrorHandler.alreadyExist('This Email is Already Taken'));
            }
        } catch (err) {
            return next(err);
        }

        const {name,email,password}=req.body;
        const hashedPassword=await bcrypt.hash(password , 10);
        const user = new User({
            
                name:name,
                email:email,
                password:hashedPassword
            
        })

        let access_token;
        let refresh_token;
        try {
            const result=await user.save();

            access_token = JwtService.sign({_id:result._id,role:result.role});
            refresh_token = JwtService.sign({_id:result._id,role:result.role},'1y', REFRESH_SECRET);
            
            await RefreshToken.create({token:refresh_token});


        } catch (err) {
            return next(err);
            
        }




        res.json({access_token,refresh_token});

    }
}



_fe1‍.d(registerController);